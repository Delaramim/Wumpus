[{"/Users/delaramohammadi/Desktop/wumpus/src/index.js":"1","/Users/delaramohammadi/Desktop/wumpus/src/App.js":"2","/Users/delaramohammadi/Desktop/wumpus/src/reportWebVitals.js":"3","/Users/delaramohammadi/Desktop/wumpus/src/Tiles.js":"4"},{"size":500,"mtime":1608478559829,"results":"5","hashOfConfig":"6"},{"size":245,"mtime":1608478857107,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1608478559830,"results":"8","hashOfConfig":"6"},{"size":5968,"mtime":1608479446934,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1denz7",{"filePath":"13","messages":"14","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"12"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},"/Users/delaramohammadi/Desktop/wumpus/src/index.js",[],["21","22"],"/Users/delaramohammadi/Desktop/wumpus/src/App.js",["23"],"import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Tiles from \"./Tiles\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"Container\">\n        <Tiles></Tiles>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/delaramohammadi/Desktop/wumpus/src/reportWebVitals.js",[],"/Users/delaramohammadi/Desktop/wumpus/src/Tiles.js",["24","25","26","27"],"import React, { useState, useEffect } from \"react\";\nimport TilesSet from \"./tilesArray.json\";\nimport notVisited from \"./NV.png\";\n\nconst Tiles = () => {\n  const [tiles, setTiles] = useState(TilesSet);\n  const [currentTile, setCurrentTile] = useState({\n    xCoordinate: tiles[0].x,\n    yCoordinate: tiles[0].y\n  });\n  const [score, setScore] = useState(0);\n  const [end, setEnd] = useState(false);\n  const [win, setWin] = useState(false);\n  useEffect(() => {\n    console.log(currentTile);\n  }, [currentTile]);\n\n  const onRight = () => {\n    if (currentTile.xCoordinate === 4)\n      alert(\"Can't go any further right. Sorry!\");\n    else if (end === true) alert(\"You lost!\");\n    else if (win == true) alert(\"You win\");\n    else\n      setTiles(oldTiles => {\n        const current = oldTiles.find(\n          p =>\n            p.x === currentTile.xCoordinate && p.y === currentTile.yCoordinate\n        );\n        current.agent = false;\n        console.log(current);\n        setCurrentTile({\n          xCoordinate: currentTile.xCoordinate + 1,\n          yCoordinate: currentTile.yCoordinate\n        });\n\n        const newPosition = oldTiles.find(\n          p =>\n            p.x === currentTile.xCoordinate + 1 &&\n            p.y === currentTile.yCoordinate\n        );\n        newPosition.visited = true;\n        newPosition.agent = true;\n        if (newPosition.value === \"pit\" || newPosition.value === \"wumpus\") {\n          setScore(score - 1000);\n          setEnd(true);\n        } else if (newPosition.value === \"gold\") {\n          setScore(score + 1000);\n          setWin(true);\n        }\n        console.log(newPosition);\n\n        return [...oldTiles];\n      });\n  };\n  const onLeft = () => {\n    if (currentTile.xCoordinate === 1)\n      alert(\"Can't go any further left. Sorry!\");\n    else if (end === true) alert(\"You lost!\");\n    else if (win == true) alert(\"You win\");\n    else\n      setTiles(oldTiles => {\n        const current = oldTiles.find(\n          p =>\n            p.x === currentTile.xCoordinate && p.y === currentTile.yCoordinate\n        );\n        current.agent = false;\n        console.log(current);\n        setCurrentTile({\n          xCoordinate: currentTile.xCoordinate - 1,\n          yCoordinate: currentTile.yCoordinate\n        });\n\n        const newPosition = oldTiles.find(\n          p =>\n            p.x === currentTile.xCoordinate - 1 &&\n            p.y === currentTile.yCoordinate\n        );\n        newPosition.visited = true;\n        newPosition.agent = true;\n        if (newPosition.value === \"pit\" || newPosition.value === \"wumpus\") {\n          setScore(score - 1000);\n          setEnd(true);\n        } else if (newPosition.value === \"gold\") {\n          setScore(score + 1000);\n          setWin(true);\n        }\n        console.log(newPosition);\n\n        return [...oldTiles];\n      });\n  };\n  const onUp = () => {\n    if (currentTile.yCoordinate === 1) alert(\"Can't go any further up. Sorry!\");\n    else if (end === true) alert(\"You lost!\");\n    else if (win === true) alert(\"You win\");\n    else\n      setTiles(oldTiles => {\n        const current = oldTiles.find(\n          p =>\n            p.x === currentTile.xCoordinate && p.y === currentTile.yCoordinate\n        );\n        current.agent = false;\n        console.log(current);\n        setCurrentTile({\n          xCoordinate: currentTile.xCoordinate,\n          yCoordinate: currentTile.yCoordinate - 1\n        });\n\n        const newPosition = oldTiles.find(\n          p =>\n            p.x === currentTile.xCoordinate &&\n            p.y === currentTile.yCoordinate - 1\n        );\n        newPosition.visited = true;\n        newPosition.agent = true;\n        if (newPosition.value === \"pit\" || newPosition.value === \"wumpus\") {\n          setScore(score - 1000);\n          setEnd(true);\n        } else if (newPosition.value === \"gold\") {\n          setScore(score + 1000);\n          setWin(true);\n        }\n        console.log(newPosition);\n\n        return [...oldTiles];\n      });\n  };\n  const onDown = () => {\n    if (currentTile.yCoordinate === 4)\n      alert(\"Can't go any further down. Sorry!\");\n    else if (end === true) alert(\"You lost!\");\n    else if (win == true) alert(\"You win\");\n    else\n      setTiles(oldTiles => {\n        const current = oldTiles.find(\n          p =>\n            p.x === currentTile.xCoordinate && p.y === currentTile.yCoordinate\n        );\n        current.agent = false;\n        console.log(current);\n        setCurrentTile({\n          xCoordinate: currentTile.xCoordinate,\n          yCoordinate: currentTile.yCoordinate + 1\n        });\n\n        const newPosition = oldTiles.find(\n          p =>\n            p.x === currentTile.xCoordinate &&\n            p.y === currentTile.yCoordinate + 1\n        );\n        newPosition.visited = true;\n        newPosition.agent = true;\n        if (newPosition.value === \"pit\" || newPosition.value === \"wumpus\") {\n          setScore(score - 1000);\n          setEnd(true);\n        } else if (newPosition.value === \"gold\") {\n          setScore(score + 1000);\n          setWin(true);\n        }\n        console.log(newPosition);\n\n        return [...oldTiles];\n      });\n  };\n\n  return (\n    <div style={{ maxWidth: 600 }}>\n      <h1>Score: {score}</h1>\n      <div style={{ margin: 40 }}>\n        <button onClick={() => onLeft()}>Left</button>\n        <button onClick={() => onUp()}>Up</button>\n        <button onClick={() => onDown()}>Down</button>\n        <button onClick={() => onRight()}>Right</button>\n      </div>\n      {tiles.map(tile => {\n        return (\n          <div\n            style={{\n              display: \"inline-block\"\n            }}\n          >\n            <img\n              style={{ width: \"150px\", height: \"150px\" }}\n              src={\n                tile.visited\n                  ? tile.agent\n                    ? tile.image2\n                    : tile.image1\n                  : notVisited\n              }\n            />\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default Tiles;\n",{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","severity":1,"message":"33","line":1,"column":8,"nodeType":"34","messageId":"35","endLine":1,"endColumn":12},{"ruleId":"36","severity":1,"message":"37","line":22,"column":18,"nodeType":"38","messageId":"39","endLine":22,"endColumn":20},{"ruleId":"36","severity":1,"message":"37","line":59,"column":18,"nodeType":"38","messageId":"39","endLine":59,"endColumn":20},{"ruleId":"36","severity":1,"message":"37","line":132,"column":18,"nodeType":"38","messageId":"39","endLine":132,"endColumn":20},{"ruleId":"40","severity":1,"message":"41","line":182,"column":13,"nodeType":"42","endLine":191,"endColumn":15},"no-native-reassign",["43"],"no-negated-in-lhs",["44"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]